#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("madcamp-week4-backend:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

const io = require("socket.io")(server, {
  cors: {
    origin: [
      "http://localhost:3001",
      "https://deploy-preview-5--sweet-torte-ca49b9.netlify.app",
      "https://main--sweet-torte-ca49b9.netlify.app",
      "https://sweet-torte-ca49b9.netlify.app",
    ],
    methods: ["GET", "POST"],
    credentials: true,
  },
});

io.on("connection", (socket) => {
  console.log("사용자가 연결되었습니다.");

  socket.on("joinMap", ({ map }) => {
    const roomName = `map_${map}`;
    socket.roomName = roomName;
    socket.join(roomName);
    console.log(`User ${userId} joined room ${roomName}`);
  });

  socket.on("location", (locationData) => {
    console.log("Received location data: ", locationData);

    // 클라이언트로부터 받은 위치 정보를 검증하거나 가공하는 과정이 필요하다면 여기서 수행
    const updatedLocationData = {
      position: locationData.position,
      direction: locationData.direction,
      place: locationData.place,
      // 필요하다면 추가 데이터를 여기에 포함시킬 수 있습니다.
    };

    // 저장된 방 이름을 사용하여 해당 방에 위치 정보를 브로드캐스트
    if (socket.roomName) {
      socket
        .to(socket.roomName)
        .emit("친구 위치 업데이트", updatedLocationData);
    }
  });

  socket.on("disconnect", () => {
    console.log("사용자가 연결 해제되었습니다.");
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
