#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("madcamp-week4-backend:server");
var http = require("http");
var cookie = require("cookie");
const jwt = require("jsonwebtoken");
const fs = require("fs");
const path = require("path");
const publicKeyPath = path.join(__dirname, "../certs/public.key");
const publicKey = fs.readFileSync(publicKeyPath);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

const io = require("socket.io")(server, {
  cors: {
    origin: [
      "http://localhost:3001",
      "https://deploy-preview-5--sweet-torte-ca49b9.netlify.app",
      "https://main--sweet-torte-ca49b9.netlify.app",
      "https://sweet-torte-ca49b9.netlify.app",
    ],
    methods: ["GET", "POST"],
    credentials: true,
  },
});

io.on("connection", (socket) => {
  console.log("사용자가 연결되었습니다.");
  try {
    const cookief = socket.handshake.headers.cookie;
    const cookies = cookie.parse(String(cookief));
    const decoded = jwt.verify(cookies.accessToken, publicKey, {
      algorithms: ["RS256"],
    });
    const tokenId = Number(decoded.id);

    socket.on("joinMap", ({ map }) => {
      if (map) {
        socket.join(map);
        console.log(`User ${tokenId} joined room ${map}`);
      } else {
        socket.join(tokenId);
        console.log(`User ${tokenId} joined room ${tokenId}`);
      }
    });

    socket.on("userInfo", () =>
      socket.emit("userInfoReturn", {
        user: tokenId,
      })
    );

    socket.on("update", () => socket.to(tokenId).emit("updateReturn"));

    socket.on("location", (locationData) => {
      // console.log(
      //   "Received location data: ",
      //   {
      //     ...locationData,
      //     user: tokenId,
      //   },
      //   "in",
      //   locationData.map
      // );

      // 저장된 방 이름을 사용하여 해당 방에 위치 정보를 브로드캐스트
      if (locationData.map) {
        socket
          .to(locationData.map)
          .emit("characterLocation", { ...locationData, user: tokenId });
      } else {
        socket.to(tokenId).emit("characterLocation", {
          ...locationData,
          map: tokenId,
          user: tokenId,
        });
      }
    });
  } catch (error) {
    console.log(error.message);
    console.log("혀용되지 않은 사용자");
    socket.disconnect(true);
    return;
  }

  socket.on("disconnect", () => {
    console.log("사용자가 연결 해제되었습니다.");
    socket.disconnect(true);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
